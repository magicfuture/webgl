<script>
<%content_for :global do %>
//  var RELEASE = true;
  var heightMap;
  var _debug_ray = new Line([0,0,-1],[0,1,-1]);
  var _debug_axis = new Axis();
  var selectedCreature = null;
  var destination = null;
  var selectionQuad = null;

  function updateKeyboardInput()
  {
    logger.attempt("update keyboard input", function() {
      var rotation = 0;
      var translation = [0,0,0];
      var movement_speed = 1.5; // in GL units per second
      var rotation_speed = 0.5;
      var strafing_speed = 1.0;
        
      movement_speed *= 0.75; // because that's the delay between frames (via setInterval, above)
      rotation_speed *= 0.15; // in an offline app we'd calculate time elapsed between frames.
      strafing_speed *= 0.15;
        
      if (currentlyPressedKeys[38]) rotation += rotation_speed; // arrow up
      if (currentlyPressedKeys[40]) rotation -= rotation_speed; // arrow down
      if (currentlyPressedKeys[87]) translation[2] -= 1; // W
      if (currentlyPressedKeys[83]) translation[2] += 1; // S
      if (currentlyPressedKeys[65]) translation[0] -= 1; // A
      if (currentlyPressedKeys[68]) translation[0] += 1; // D
        
      world.camera.move(movement_speed, translation);
      var position = world.camera.getPosition(), view = world.camera.getView();
      // this condition pegs the camera rotation so the user can't rotate
      // to inappropriate views (below the terrain, upside down, etc.)
      // Keep in mind that this is a totally unacceptable technique if
      // the camera is to rotate in other directions (for instance, to look left).
      if ((rotation > 0 && view[1] <= -0.521 && view[2] >= -0.853) ||
          (rotation < 0 && view[1] >= -0.98  && view[2] <= -0.196))
      {
        world.camera.rotateView(rotation, 0, 0);

        // we need to project along the [y,z] view vector from the camera's position
        // some set focal distance. We can't just use the camera's distance from the origin
        // (which would be its current position) because that can change by camera movement,
        // which causes some very bizarre camera issues indeed.
        window.predefined_distance = window.predefined_distance || [75, 42];
        position[1] -= predefined_distance[0];
        position[2] -= predefined_distance[1];
        
        var theta = rotation;
        var y = predefined_distance[0], z = predefined_distance[1];
        predefined_distance[0] = y*Math.cos(theta) - z*Math.sin(theta);
        predefined_distance[1] = y*Math.sin(theta) + z*Math.cos(theta);
        
        position[1] += predefined_distance[0];
        position[2] += predefined_distance[1];
        world.camera.look();
      }
    });
  }
<%end%>

<%content_for :init do%>
  selectionQuad = new Quad(1,1);
  selectionQuad.orientation.setPosition(0,0,-10);
  selectionQuad.orientation.orient([0,1,0],[0,0,1],[1,0,0],[0,20,0]);
  selectionQuad.orientation.look();
  selectionQuad.mesh.texture = new Texture("/images/selection.png");

  world.camera.moveTo(35, 75, 42);
  world.camera.orient([0, -1, -0.2], [0, 0.2, -1]).look();

  _debug_axis.offset = [0,10,0];
  _debug_axis.scale = 3;

  // need to keep the debug ray separate from the world because
  // our current implementation of heightmap will reposition
  // the ray based on the surrounding terrain. This is suboptimal
  // and needs to be addressed in a more permanent way.
//  world.addObject(_debug_ray);
      
  setInterval(updateKeyboardInput, 30);
<%end%>

<%content_for :render do%>
  world.context.gl.disable(GL_BLEND);
  world.render();


  world.camera.look(world.context.gl);
  _debug_ray.render(world.context);

  if (selectedCreature)
  {
    // update quad position because the creature may have moved
    var pos = selectedCreature.orientation.getPosition();
    selectionQuad.orientation.setPosition(pos[0], pos[1]+selectedCreature.lowest()+1, pos[2]);

    world.context.gl.enable(GL_BLEND);
    world.context.gl.blendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    selectionQuad.render(world.context);
    _debug_axis.render(world.context);
    
    if (destination)
    {
      if (!selectedCreature.ai.isMoving())
        destination = null;
      else
      {
        selectionQuad.orientation.setPosition(destination[0], destination[1]+1, destination[2]);
        selectionQuad.render(world.context);
      }
    }
  }
<%end%>
        
<%content_for :mouse_pressed do%>
  var target = world.pick(mouse.x, mouse.y);
  if (target)
  {
    selectedCreature = target;
    destination = null;
    selectionQuad.setSize(selectedCreature.mesh.size_x, selectedCreature.mesh.size_z);
    _debug_axis.set(selectedCreature.orientation);
  }
  else
  {
    var ray = world.unproject(mouse.x, mouse.y);
    _debug_ray.set(ray[0], ray[1]);
                 
    // line-segment/triangle collision detection
    /* TODO: this belongs...er...somewhere else. (am i really writing a coldet library now??) */
    /* returns:
        -1 = triangle is degenerate (a segment or point)
         0 = disjoint (no intersection)
         1 = intersect in unique point I
     */
    function coldet_segm_tri(segm, tri, I) // success=coldet_segm_tri([[0,0],[1,0]], [[0,0,0],[0,1,0],[1,0,0]], result);
    {
      function vector(a, b, c) { a[0] = b[0] - c[0]; a[1] = b[1] - c[1]; a[2] = b[2] - c[2]; }

      var p = segm[0], d = segm[1].minus(segm[0]);
      var v0 = tri[0], v1 = tri[1], v2 = tri[2];
      var e1 = [], e2 = [], h = [], s = [], q = [];
      var a, f, u, v;
      
      vector(e1, v1, v0);
      vector(e2, v2, v0);
      h = d.cross(e2);
      a = e1.innerProduct(h);
      
      if (a > -Math.EPSILON && a < Math.EPSILON) // triangle is degenerate
        return -1;
      
      f = 1.0 / a;
      vector(s,p,v0);
      u = f * s.innerProduct(h);
      
      if (u < 0.0 || u > 1.0) return 0;
      
      q = s.cross(e1);
      v = f * d.innerProduct(q);
      if (v < 0.0 || u + v > 1.0) return 0;
      
      // at this stage we can compute t to find out where
      // the intersection point is on the line
      var t = f * e2.innerProduct(q);
      if (t > Math.EPSILON) {
        t = d.times(t).plus(p);
        I[0] = t[0];
        I[1] = t[1];
        I[2] = t[2];
        return 1;
      }

      // otherwise, there is a line intersection but not a ray intersection
      return 0;
    }
    
    heightMap = world.scene;
//    heightMap.render_segments = true;

    var candidates = [];
    var holder = [];
    var tri = [[], [], []];
    var i, j;
    
    // see which vertices are visible
    var visible = heightMap.getVisibleVertices(world.camera.frustum);
    for (i = 0; i < visible.length; i += 9)
    {
      for (j = 0; j < 9; j++)
        tri[parseInt(j / 3)][j % 3] = visible[i+j];

      var result = coldet_segm_tri(ray, tri, holder);
      if (result > 0 && holder.length > 0)
        candidates.push(holder);
      holder = [];
    }
    
    // find the candidate that is closest to the camera
    var closest = null, closestDist = null;
    for (i = 0; i < candidates.length; i++)
    {
      var d = world.camera.getPosition().minus(candidates[i]).magnitude();
      if (closest == null || closestDist > d) {
        closest = candidates[i];
        closestDist = d;
      }
    }
    
    if (closest && selectedCreature)
    {
      destination = closest;
      selectedCreature.ai.moveTo(destination, function(creature) { creature.playAnimation("stand", true); });
      selectedCreature.playAnimation("run", true);
    }
  }
<%end%>
</script>

<p>
  The "Interface" demo combines the various other demos to produce a mock-up, would-be game interface. It's not an
  actual game, though I do hope to code a game in WebGL one day.
</p>
<p>
  Currently, this demo makes use of World, Camera, HeightMap, Texture, Context, Renderable, MD2.
</p>
<p>
  You can control the camera with W, S, A and D. Up and down arrows will change the camera's pitch.
</p>
